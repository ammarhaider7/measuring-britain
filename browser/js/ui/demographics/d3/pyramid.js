// Generated by CoffeeScript 1.10.0
var drawPyramid;

drawPyramid = function(options) {
  var activeLineCategory, activeLineValue, ages, bar_females, bar_females_perc, bar_females_perc_format, bar_females_sum, bar_males, bar_males_perc, bar_males_perc_format, bar_males_sum, container, drawOutline, femaleKeyGroup, g, height, init, isDefault, isFirstLine, isOutline, keyGroup, leftGroup, maleKeyGroup, margin, my, onFirstLineDrawn, onMouseOver, outlineFilter, outline_females, outline_females_perc, outline_females_perc_format, outline_females_sum, outline_males, outline_males_perc, outline_males_perc_format, outline_males_sum, overlayGroup, overlay_data, ref, ref1, resize, resizePyramid, rightGroup, svg, ticksGroup, titleGroup, update, updateOutline, updatePyramid, width, x, xAxis, xAxisGroupLeft, xAxisGroupRight, xAxisLeft, xLeft, y;
  container = options.container, ages = options.ages, bar_males = options.bar_males, bar_males_perc = options.bar_males_perc, bar_males_perc_format = options.bar_males_perc_format, bar_males_sum = options.bar_males_sum, bar_females = options.bar_females, bar_females_perc = options.bar_females_perc, bar_females_perc_format = options.bar_females_perc_format, bar_females_sum = options.bar_females_sum, outline_males = options.outline_males, outline_females = options.outline_females, outline_males_perc = options.outline_males_perc, outline_males_perc_format = options.outline_males_perc_format, outline_males_sum = options.outline_males_sum, outline_females_perc = options.outline_females_perc, outline_females_perc_format = options.outline_females_perc_format, outline_females_sum = options.outline_females_sum, overlay_data = options.overlay_data, onMouseOver = options.onMouseOver, onFirstLineDrawn = options.onFirstLineDrawn, isDefault = options.isDefault, outlineFilter = options.outlineFilter, updatePyramid = options.updatePyramid, updateOutline = options.updateOutline, activeLineValue = options.activeLineValue, activeLineCategory = options.activeLineCategory, isFirstLine = options.isFirstLine, resize = options.resize;
  width = (ref = $(container).width()) != null ? ref : 750;
  height = (ref1 = $(container).height()) != null ? ref1 : 570;
  isOutline = outlineFilter;
  margin = {
    top: 25,
    right: 50,
    bottom: 75,
    left: 50,
    middle: 25
  };
  x = function(data) {
    return d3.scale.linear().domain([
      0, d3.max(data, function(d) {
        return d;
      })
    ]).range([0, (width / 2) - margin.middle]);
  };
  xLeft = function(data) {
    return d3.scale.linear().domain([
      d3.max(data, function(d) {
        return d;
      }), 0
    ]).range([0, (width / 2) - margin.middle]);
  };
  y = function(data) {
    return d3.scale.ordinal().domain(d3.range(data.length)).rangeBands([0, height - margin.bottom]);
  };
  xAxis = function(data) {
    return d3.svg.axis().scale(x(data)).orient('bottom').ticks(5).tickFormat(d3.format(',.1%'));
  };
  xAxisLeft = function(data) {
    return d3.svg.axis().scale(xLeft(data)).orient('bottom').ticks(5).tickFormat(d3.format(',.1%'));
  };
  svg = d3.select('.pyramid-svg');
  g = svg.select('.main-group');
  rightGroup = svg.select('.right-group');
  leftGroup = svg.select('.left-group');
  overlayGroup = svg.select('.overlay-group');
  ticksGroup = svg.select('.ticks-group');
  xAxisGroupLeft = svg.select('.x.axis.left');
  xAxisGroupRight = svg.select('.x.axis.right');
  titleGroup = svg.select('.title-group');
  keyGroup = svg.select('.key-group');
  maleKeyGroup = keyGroup.select('.male-key-group');
  femaleKeyGroup = keyGroup.select('.female-key-group');
  my = function() {
    var outlineDataReceived;
    if (resize === true) {
      return resizePyramid();
    }
    if (isDefault === true) {
      init();
      if (isOutline === true && updateOutline === true) {
        drawOutline();
      }
    } else if (isDefault === false) {
      update();
      outlineDataReceived = outline_males_perc != null;
      if (isOutline === true && outlineDataReceived === true) {
        drawOutline();
      }
    }
  };
  init = function() {
    var agesTitle, format, maxFemalePerc, percFormat;
    format = d3.format(',');
    percFormat = d3.format('.0f');
    maxFemalePerc = d3.max(bar_females_perc);
    g.attr("transform", "translate(0, " + margin.top + ")");
    overlayGroup.attr("transform", "translate(0, " + margin.top + ")");
    leftGroup.attr("transform", "translate(0, " + margin.top + ")");
    rightGroup.attr("transform", "translate(" + ((width / 2) + margin.middle) + ", " + margin.top + ")");
    ticksGroup.attr("transform", "translate(" + (width / 2) + ", " + (margin.bottom - 5) + ")");
    xAxisGroupLeft.attr("transform", "translate(" + (-(width / 2)) + ", " + (height - (margin.bottom + 15)) + ")");
    xAxisGroupRight.attr("transform", "translate(" + margin.middle + ", " + (height - (margin.bottom + 15)) + ")");
    titleGroup.attr("transform", "translate(" + (0.25 * width) + ", " + (margin.top - 10) + ")");
    keyGroup.attr("transform", "translate(" + (width - margin.right * 3) + ", " + margin.top + ")");
    maleKeyGroup.attr("transform", "translate(70, 0)");
    titleGroup.append('text').text('Males \& Females, by 5 year age bands, as % of the population').attr('class', 'mb-oxygen').style('font-size', '12px');
    maleKeyGroup.append('rect').attr({
      width: 15,
      height: 15,
      fill: 'rgb(31, 119, 180)',
      x: 0,
      y: 0
    });
    maleKeyGroup.append('text').text('Males').style('text-anchor', 'middle').style('font-size', 12).attr({
      x: 35,
      y: 12,
      "class": 'mb-oxygen'
    });
    femaleKeyGroup.append('rect').attr({
      width: 15,
      height: 15,
      fill: 'rgb(255, 152, 150)',
      x: 0,
      y: 0
    });
    femaleKeyGroup.append('text').text('Females').style('text-anchor', 'middle').style('font-size', 12).attr({
      x: 40,
      y: 12,
      "class": 'mb-oxygen'
    });
    rightGroup.selectAll('rect').data(bar_males_perc).enter().append('rect').attr({
      opacity: 0,
      width: 0,
      height: function() {
        return y(bar_males_perc).rangeBand();
      },
      fill: 'rgb(31, 119, 180)',
      stroke: 'rgb(17, 107, 169)',
      x: 0,
      y: function(d, i) {
        return y(bar_males_perc)(i);
      },
      rx: 1,
      ry: function(d, i) {
        return y(bar_males_perc)(i) + 1;
      },
      "class": 'pyramid-bar right'
    }).transition().duration(1500).attr({
      opacity: 1,
      width: function(d) {
        return x(bar_males_perc)(d);
      }
    });
    leftGroup.selectAll('rect').data(bar_females_perc).enter().append('rect').attr({
      opacity: 0,
      width: 0,
      height: function() {
        return y(bar_females_perc).rangeBand();
      },
      fill: 'rgb(255, 152, 150)',
      stroke: 'rgb(250, 133, 131)',
      x: x(bar_females_perc)(maxFemalePerc),
      y: function(d, i) {
        return y(bar_females_perc)(i);
      },
      rx: 1,
      ry: function(d, i) {
        return y(bar_females_perc)(i) + 1;
      },
      "class": 'pyramid-bar left'
    }).transition().duration(1500).attr({
      opacity: 1,
      width: function(d) {
        return x(bar_females_perc)(d);
      },
      x: function(d) {
        return xLeft(bar_females_perc)(d);
      }
    });
    ticksGroup.selectAll('text').data(ages).enter().append('text').attr('opacity', 0).attr('y', function(d, i) {
      return y(bar_males_perc)(i);
    }).style('text-anchor', 'middle').style('font-size', '12px').transition().duration(1500).text(function(d) {
      return d;
    }).attr('opacity', 1);
    agesTitle = d3.select('.ages')[0][0];
    if (agesTitle == null) {
      ticksGroup.append('text').style('text-anchor', 'middle').style('font-size', '12px').style('font-weight', 'bold').attr({
        y: -margin.top,
        "class": 'ages',
        opacity: 0
      }).transition().duration(1500).text('Ages').attr('opacity', 1);
    }
    xAxisGroupLeft.call(xAxisLeft(bar_females_perc_format));
    xAxisGroupRight.call(xAxis(bar_males_perc_format));
    overlayGroup.selectAll('rect').data(overlay_data).enter().append('rect').attr({
      width: width,
      height: function(d) {
        return y(bar_males).rangeBand();
      },
      fill: 'rgba(0,0,0,0)',
      y: function(d, i) {
        return y(bar_males)(i) + margin.top;
      },
      "class": 'overlay-rect'
    });
    d3.selectAll('.overlay-rect').on('mouseover', function(d) {
      return onMouseOver(d);
    });
    return onMouseOver({
      age: 'All Ages',
      females: bar_females_sum,
      males: bar_males_sum,
      initial: true
    });
  };
  update = function() {
    var leftBars, overlayBars, rightBars;
    svg = d3.select('.pyramid-svg');
    leftBars = svg.selectAll('.pyramid-bar.left');
    rightBars = svg.selectAll('.pyramid-bar.right');
    overlayBars = svg.selectAll('.overlay-rect');
    xAxisGroupLeft = svg.select('.x.axis.left');
    xAxisGroupRight = svg.select('.x.axis.right');
    leftBars.data(bar_females_perc).transition().duration(1000).delay(500).attr({
      width: function(d) {
        return x(bar_females_perc)(d);
      },
      x: function(d) {
        return xLeft(bar_females_perc)(d);
      }
    });
    rightBars.data(bar_males_perc).transition().duration(1000).delay(500).attr({
      width: function(d) {
        return x(bar_males_perc)(d);
      }
    });
    overlayBars.data(overlay_data);
    xAxisGroupLeft.transition().duration(1000).delay(500).call(xAxisLeft(bar_females_perc_format));
    xAxisGroupRight.transition().duration(1000).delay(500).call(xAxis(bar_males_perc_format));
    return onMouseOver({
      age: 'All Ages',
      females: bar_females_sum,
      males: bar_males_sum,
      initial: null
    });
  };
  drawOutline = function() {
    var femalesChartLine, femalesLine, malesChartLine, malesLine;
    malesLine = d3.svg.line().interpolate('step-before').x(function(d) {
      return x(bar_males_perc)(d);
    }).y(function(d, i) {
      if (i === bar_males_perc.length) {
        return y(bar_males_perc).rangeExtent()[1];
      } else {
        return y(bar_males_perc)(i);
      }
    });
    femalesLine = d3.svg.line().interpolate('step-before').x(function(d) {
      return xLeft(bar_females_perc)(d);
    }).y(function(d, i) {
      if (i === bar_females_perc.length) {
        return y(bar_females_perc).rangeExtent()[1];
      } else {
        return y(bar_females_perc)(i);
      }
    });
    if (isFirstLine === false) {
      svg = d3.select('.pyramid-svg');
      malesChartLine = svg.select('.males-outline');
      femalesChartLine = svg.select('.females-outline');
      malesChartLine.transition().duration(1000).delay(500).attr({
        d: malesLine(outline_males_perc.concat([outline_males_perc[outline_males_perc.length - 1]]))
      });
      femalesChartLine.transition().duration(1000).delay(500).attr({
        d: femalesLine(outline_females_perc.concat([outline_females_perc[outline_females_perc.length - 1]]))
      });
    } else {
      malesChartLine = rightGroup.append('path').attr('opacity', 0).transition().duration(500).delay(500).attr({
        "class": 'males-outline',
        d: malesLine(outline_males_perc.concat([outline_males_perc[outline_males_perc.length - 1]])),
        opacity: 1
      });
      femalesChartLine = leftGroup.append('path').attr('opacity', 0).transition().duration(500).delay(500).attr({
        "class": 'females-outline',
        d: femalesLine(outline_females_perc.concat([outline_females_perc[outline_females_perc.length - 1]])),
        opacity: 1
      });
      onFirstLineDrawn();
    }
  };
  resizePyramid = function() {
    var leftBars, overlayBars, rightBars;
    svg = d3.select('.pyramid-svg');
    leftBars = svg.selectAll('.pyramid-bar.left');
    rightBars = svg.selectAll('.pyramid-bar.right');
    overlayBars = svg.selectAll('.overlay-rect');
    xAxisGroupLeft = svg.select('.x.axis.left');
    xAxisGroupRight = svg.select('.x.axis.right');
    g.attr("transform", "translate(0, " + margin.top + ")");
    overlayGroup.attr("transform", "translate(0, " + margin.top + ")");
    leftGroup.attr("transform", "translate(0, " + margin.top + ")");
    rightGroup.attr("transform", "translate(" + ((width / 2) + margin.middle) + ", " + margin.top + ")");
    ticksGroup.attr("transform", "translate(" + (width / 2) + ", " + (margin.bottom - 5) + ")");
    xAxisGroupLeft.attr("transform", "translate(" + (-(width / 2)) + ", " + (height - (margin.bottom + 15)) + ")");
    xAxisGroupRight.attr("transform", "translate(" + margin.middle + ", " + (height - (margin.bottom + 15)) + ")");
    titleGroup.attr("transform", "translate(" + (0.25 * width) + ", " + (margin.top - 10) + ")");
    keyGroup.attr("transform", "translate(" + (width - margin.right * 3) + ", " + margin.top + ")");
    maleKeyGroup.attr("transform", "translate(70, 0)");
    svg = d3.select('.pyramid-svg');
    leftBars = svg.selectAll('.pyramid-bar.left');
    rightBars = svg.selectAll('.pyramid-bar.right');
    overlayBars = svg.selectAll('.overlay-rect');
    xAxisGroupLeft = svg.select('.x.axis.left');
    xAxisGroupRight = svg.select('.x.axis.right');
    leftBars.data(bar_females_perc).attr({
      width: function(d) {
        return x(bar_females_perc)(d);
      },
      x: function(d) {
        return xLeft(bar_females_perc)(d);
      }
    });
    rightBars.data(bar_males_perc).attr({
      width: function(d) {
        return x(bar_males_perc)(d);
      }
    });
    overlayBars.data(overlay_data);
    xAxisGroupLeft.call(xAxisLeft(bar_females_perc_format));
    return xAxisGroupRight.call(xAxis(bar_males_perc_format));
  };
  my.width = function(value) {
    if (!arguments.length) {
      return width;
    }
    width = value;
    return my;
  };
  my.height = function(value) {
    if (!arguments.length) {
      return height;
    }
    height = value;
    return my;
  };
  return my;
};

module.exports = drawPyramid;

//# sourceMappingURL=pyramid.map
