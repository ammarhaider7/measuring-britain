// Generated by CoffeeScript 1.10.0
var Bars, Pyramid, PyramidComponent, Table, TableComponent, addFilter, connect, fetchPyramidData, mapDispatchToProps, mapStateToProps, mapStateToPropsPyrBars, mapStateToPropsPyrTable, mouseOver, pyBarsComponent, ref, removeFilter, requestPyramidData, toggleCategory, toggleOutlineCategory, toggleOutlineValue, toggleValue;

connect = require('react-redux').connect;

ref = require('../../actions/demographics/pyramid-actions.js'), mouseOver = ref.mouseOver, toggleCategory = ref.toggleCategory, addFilter = ref.addFilter, toggleOutlineCategory = ref.toggleOutlineCategory, toggleValue = ref.toggleValue, removeFilter = ref.removeFilter, toggleOutlineValue = ref.toggleOutlineValue, requestPyramidData = ref.requestPyramidData, fetchPyramidData = ref.fetchPyramidData;

PyramidComponent = require('../../../ui/demographics/pyramid-component.js');

TableComponent = require('../../../ui/demographics/pyramid-table.js');

pyBarsComponent = require('../../../ui/demographics/pyramid-bars.js');

mapStateToProps = function(state) {
  return {
    chartName: state.pyramidChart.chartName,
    _barsCategory: state.pyramidChart._barsCategory,
    _barsValue: state.pyramidChart._barsValue,
    data: state.pyramidChart.data,
    isFetching: state.pyramidChart.isFetching,
    outlineFilter: state.pyramidChart.outlineFilter,
    _outlineCategory: state.pyramidChart._outlineCategory,
    _outlineValue: state.pyramidChart._outlineValue,
    error: state.pyramidChart.error,
    updatePyramid: state.pyramidChart.updatePyramid,
    isDefault: state.pyramidChart.isDefault,
    updateOutline: state.pyramidChart.updateOutline
  };
};

mapStateToPropsPyrTable = function(state) {
  return {
    data: state.pyramidChart.data,
    activeBarsCategory: state.pyramidChart.activeBarsCategory,
    activeBarsValue: state.pyramidChart.activeBarsValue,
    isFetching: state.pyramidChart.isFetching,
    isDefault: state.pyramidChart.isDefault
  };
};

mapStateToPropsPyrBars = function(state) {
  return {
    _mouseOverData: state.pyramidChart._mouseOverData,
    updateBars: state.pyramidChart.updateBars,
    isFetching: state.pyramidChart.isFetching,
    isDefault: state.pyramidChart.isDefault,
    activeBarsCategory: state.pyramidChart.activeBarsCategory,
    activeBarsValue: state.pyramidChart.activeBarsValue
  };
};

mapDispatchToProps = function(dispatch) {
  return {
    onCategoryChange: function(category, selectedOption) {
      return dispatch(toggleCategory(category, selectedOption[0]));
    },
    onValueChange: function(value, selectedOption) {
      return dispatch(toggleValue(value, selectedOption[0]));
    },
    onAddOutline: function() {
      return dispatch(addFilter());
    },
    onRemoveFilter: function() {
      return dispatch(removeFilter());
    },
    onOutlineCategoryChange: function(value, selectedOption) {
      return dispatch(toggleOutlineCategory(value, selectedOption[0]));
    },
    onOutlineValueChange: function(value, selectedOption) {
      return dispatch(toggleOutlineValue(value, selectedOption[0]));
    },
    fetchPyramidData: function(filterOptions) {
      return dispatch(fetchPyramidData(filterOptions));
    },
    onMouseOver: function(mouseOverData) {
      return dispatch(mouseOver(mouseOverData));
    }
  };
};

Pyramid = connect(mapStateToProps, mapDispatchToProps)(PyramidComponent);

Table = connect(mapStateToPropsPyrTable)(TableComponent);

Bars = connect(mapStateToPropsPyrBars)(pyBarsComponent);

module.exports = {
  Pyramid: Pyramid,
  Table: Table,
  Bars: Bars
};

//# sourceMappingURL=pyramid-containers.map
