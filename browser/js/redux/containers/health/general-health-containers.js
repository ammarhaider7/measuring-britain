// Generated by CoffeeScript 1.10.0
var GenHealthChart, GenHealthChartComponent, GenHealthChartDetail, GenHealthChartDetailComponent, connect, controlsClosed, controlsOpened, districtSearch, fetchGenHealthData, highlightLine, initDone, initGenHealth, initGenHealthOff, mapDispatchToProps, mapDispatchToPropsDetail, mapStateToProps, mapStateToPropsDetail, mouseOver, ref, requestGenHealthData, toggleCategory, toggleSex, toggleValue, unHighlightLine;

connect = require('react-redux').connect;

ref = require('../../actions/health/general-health-actions.js'), mouseOver = ref.mouseOver, toggleCategory = ref.toggleCategory, highlightLine = ref.highlightLine, unHighlightLine = ref.unHighlightLine, toggleValue = ref.toggleValue, toggleSex = ref.toggleSex, requestGenHealthData = ref.requestGenHealthData, fetchGenHealthData = ref.fetchGenHealthData, controlsOpened = ref.controlsOpened, controlsClosed = ref.controlsClosed, districtSearch = ref.districtSearch, initGenHealth = ref.initGenHealth, initGenHealthOff = ref.initGenHealthOff, initDone = ref.initDone;

GenHealthChartComponent = require('../../../ui/health/general-health-component.js');

GenHealthChartDetailComponent = require('../../../ui/health/general-health-detail-component.js');

mapStateToProps = function(state) {
  return {
    chartName: state.genHealthChart.chartName,
    _category: state.genHealthChart._category,
    _value: state.genHealthChart._value,
    _highlights: state.genHealthChart._highlights,
    data: state.genHealthChart.data,
    isFetching: state.genHealthChart.isFetching,
    activeCategory: state.genHealthChart.activeCategory,
    activeValue: state.genHealthChart.activeValue,
    error: state.genHealthChart.error,
    updateGenHealth: state.genHealthChart.updateGenHealth,
    isDefault: state.genHealthChart.isDefault,
    isControlsOpen: state.genHealthChart.isControlsOpen,
    district_query: state.genHealthChart.district_query,
    init_gen_health: state.genHealthChart.init_gen_health,
    init_done: state.genHealthChart.init_done,
    updateHighlights: state.genHealthChart.updateHighlights,
    sex: state.genHealthChart.sex,
    sex_code: state.genHealthChart.sex_code
  };
};

mapStateToPropsDetail = function(state) {
  return {
    data: state.genHealthChart.data,
    _category: state.genHealthChart._category,
    _value: state.genHealthChart._value,
    activeCategory: state.genHealthChart.activeCategory,
    activeValue: state.genHealthChart.activeValue,
    isFetching: state.genHealthChart.isFetching,
    isDefault: state.genHealthChart.isDefault,
    mouseOverData: state.genHealthChart._mouseOverData,
    updateTable: state.genHealthChart.updateTable,
    _highlights: state.genHealthChart._highlights,
    sex: state.genHealthChart.sex,
    sex_code: state.genHealthChart.sex_code
  };
};

mapDispatchToPropsDetail = function(dispatch) {
  return {
    onHighlightLine: function(ethnicity) {
      return dispatch(highlightLine(ethnicity));
    },
    onUnHighlightLine: function(ethnicity, index) {
      return dispatch(unHighlightLine(ethnicity, index));
    },
    fetchGenHealthData: function(filterOptions) {
      return dispatch(fetchGenHealthData(filterOptions));
    },
    onToggleSex: function(sex, code) {
      return dispatch(toggleSex(sex, code));
    }
  };
};

mapDispatchToProps = function(dispatch) {
  return {
    onCategoryChange: function(category) {
      return dispatch(toggleCategory(category));
    },
    onValueChange: function(value) {
      return dispatch(toggleValue(value));
    },
    onControlsOpen: function() {
      return dispatch(controlsOpened());
    },
    onControlsClosed: function() {
      return dispatch(controlsClosed());
    },
    fetchGenHealthData: function(filterOptions) {
      return dispatch(fetchGenHealthData(filterOptions));
    },
    onMouseOver: function(mouseOverData) {
      return dispatch(mouseOver(mouseOverData));
    },
    onDistrictSearch: function(query) {
      return dispatch(districtSearch(query));
    },
    onInitGenHealth: function() {
      return dispatch(initGenHealth());
    },
    offInitGenHealth: function() {
      return dispatch(initGenHealthOff());
    },
    onInitDone: function() {
      return dispatch(initDone());
    }
  };
};

GenHealthChart = connect(mapStateToProps, mapDispatchToProps)(GenHealthChartComponent);

GenHealthChartDetail = connect(mapStateToPropsDetail, mapDispatchToPropsDetail)(GenHealthChartDetailComponent);

module.exports = {
  GenHealthChart: GenHealthChart,
  GenHealthChartDetail: GenHealthChartDetail
};

//# sourceMappingURL=general-health-containers.map
