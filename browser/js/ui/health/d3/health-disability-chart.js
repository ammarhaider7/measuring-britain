// Generated by CoffeeScript 1.10.0
var drawDisabilityChart;

drawDisabilityChart = function(options) {
  var activeCategory, activeValue, ages, attachHoverHandlers, chart_height, chart_width, colour, container, d3_array, data, ethnicities, format, height, isDefault, margin, my, onInitDone, onMouseOver, percFormat, pointPercFormat, ref, ref1, trimEthnicity, width, x0, x1, xAxis, y, yAxis;
  container = options.container, data = options.data, isDefault = options.isDefault, onMouseOver = options.onMouseOver, activeCategory = options.activeCategory, activeValue = options.activeValue, onInitDone = options.onInitDone;
  trimEthnicity = function(ethnicity_string) {
    var str, trimmedStr;
    if (ethnicity_string.indexOf('Gypsy') !== -1) {
      trimmedStr = 'Gypsy';
      return trimmedStr;
    } else if (ethnicity_string.indexOf('English') !== -1) {
      trimmedStr = 'British';
      return trimmedStr;
    } else if (ethnicity_string.indexOf('Any other') !== -1) {
      trimmedStr = 'Any other';
      return trimmedStr;
    } else if (ethnicity_string.indexOf('Arab') !== -1) {
      trimmedStr = 'Arab';
      return trimmedStr;
    } else if (ethnicity_string.indexOf('and') !== -1) {
      str = ethnicity_string.replace(' and ', '/');
      trimmedStr = str.substr(str.indexOf(':') + 2, str.length);
      return trimmedStr;
    } else {
      str = ethnicity_string;
      trimmedStr = str.substr(str.indexOf(':') + 2, str.length);
      return trimmedStr;
    }
  };
  my = {};
  width = (ref = $(container).width()) != null ? ref : 1140;
  height = (ref1 = $(container).height()) != null ? ref1 : 550;
  margin = {
    top: 20,
    right: 20,
    bottom: 30,
    left: 40,
    p: 25
  };
  chart_width = width - margin.left - margin.right;
  chart_height = height - margin.top - margin.bottom;
  format = d3.format('.2s');
  percFormat = d3.format(',.0%');
  pointPercFormat = d3.format(',.2%');
  d3_array = data.percentages;
  ethnicities = data.ethnicities;
  ages = data.ages;
  colour = d3.scale.ordinal().range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c"]).domain(ages);
  x0 = d3.scale.ordinal().domain(ethnicities).rangeRoundBands([0, chart_width], 0.05);
  x1 = d3.scale.ordinal().domain(ages).rangeRoundBands([0, x0.rangeBand()]);
  y = d3.scale.linear().domain([0, 0.55]).range([chart_height, 0]);
  xAxis = d3.svg.axis().tickFormat(trimEthnicity).scale(x0).orient('bottom');
  yAxis = d3.svg.axis().scale(y).tickFormat(percFormat).orient('left');
  my.init = function() {
    var ethnicity, main_group, svg, title_group, x_axis_group, y_axis_group;
    svg = d3.select('.disability-svg');
    main_group = svg.select('.main-group');
    x_axis_group = svg.select('.x.axis');
    y_axis_group = svg.select('.y.axis');
    title_group = svg.select('.title-group');
    main_group.attr('transform', "translate(" + margin.left + ", " + margin.top + ")");
    x_axis_group.attr('transform', "translate(" + margin.left + ", " + (chart_height + margin.top) + ")");
    y_axis_group.attr('transform', "translate(" + margin.left + ", " + margin.top + ")");
    title_group.attr('transform', "translate(" + (chart_width / 2 + margin.left) + ", 0)");
    x_axis_group.call(xAxis);
    y_axis_group.call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("% of Population");
    ethnicity = main_group.selectAll('.ethnicity').data(d3_array).enter().append('g').attr({
      "class": 'ethnicity',
      transform: function(d) {
        return "translate(" + (x0(d.key)) + ", 0)";
      }
    });
    ethnicity.selectAll('rect').data(function(d) {
      return d.values;
    }).enter().append('rect').attr({
      width: x1.rangeBand(),
      x: function(d) {
        return x1(d.key);
      },
      y: function(d) {
        return y(d.values.limited_a_lot);
      },
      height: function(d) {
        return chart_height - y(d.values.limited_a_lot);
      },
      fill: function(d) {
        return colour(d.key);
      },
      "class": 'rect'
    });
    title_group.append('text').attr({
      x: 0,
      y: margin.p,
      opacity: 0,
      'font-size': '12px'
    }).style("text-anchor", "middle").text('Long-term illness / disability by ethinicity').transition().duration(1500).attr('opacity', 1);
    return attachHoverHandlers();
  };
  my.update = function() {
    var groups, svg, x_axis_group, y_axis_group;
    svg = d3.select('.disability-svg');
    groups = svg.selectAll('.ethnicity');
    x_axis_group = svg.select('.x.axis');
    y_axis_group = svg.select('.y.axis');
    groups.data(d3_array);
    groups.selectAll('rect').data(function(d) {
      return d.values;
    }).transition().duration(1000).delay(500).attr({
      y: function(d) {
        return y(d.values.limited_a_lot);
      },
      height: function(d) {
        return chart_height - y(d.values.limited_a_lot);
      }
    });
    labels.data(d3_array).transition().duration(1000).delay(500).attr({
      transform: function(d) {
        return "translate(" + (x(d.values[d.values.length - 1].key)) + ", " + (y(d.values[d.values.length - 1].values.bad)) + ")";
      }
    });
    return attachHoverHandlers();
  };
  attachHoverHandlers = function() {
    var rects, svg;
    svg = d3.select('.disability-svg');
    rects = svg.selectAll('.rect');
    return rects.on('mouseover', function(d) {
      var _rect;
      _rect = d3.select(this);
      _rect.attr('opacity', 0.7);
      return console.log(d);
    }).on('mouseout', function(d) {
      var _rect;
      _rect = d3.select(this);
      return _rect.attr('opacity', 1);
    });
  };
  my.width = function(value) {
    if (!arguments.length) {
      return width;
    }
    width = value;
    return my;
  };
  my.height = function(value) {
    if (!arguments.length) {
      return height;
    }
    height = value;
    return my;
  };
  return my;
};

module.exports = drawDisabilityChart;

//# sourceMappingURL=health-disability-chart.map
