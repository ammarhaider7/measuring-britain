// Generated by CoffeeScript 1.10.0
var d3, drawBarChart;

d3 = require('d3');

drawBarChart = function(options) {
  var activeCategory, activeValue, chart_height, chart_width, container, d3_array, data, format, height, isDefault, key, margin, my, onInitDone, onMouseOver, ref, ref1, width, x, xAxis, y;
  container = options.container, data = options.data, isDefault = options.isDefault, onMouseOver = options.onMouseOver, activeCategory = options.activeCategory, activeValue = options.activeValue, onInitDone = options.onInitDone;
  my = {};
  width = (ref = container.offsetWidth) != null ? ref : 750;
  height = (ref1 = container.offsetHeight) != null ? ref1 : 500;
  margin = {
    top: 40,
    right: 40,
    bottom: 10,
    left: 70
  };
  chart_width = width - margin.left - margin.right;
  chart_height = height - margin.top - margin.bottom;
  format = d3.format('.2s');
  d3_array = data.d3_array;
  y = d3.scale.ordinal().domain(d3_array.map(function(d) {
    return d.name;
  })).rangeRoundBands([0, chart_height], 0.1);
  x = d3.scale.linear().domain([
    0, d3.max(d3_array, function(d) {
      return d.value;
    })
  ]).range([0, chart_width]);
  xAxis = d3.svg.axis().scale(x).tickSize(-chart_height - margin.bottom).tickFormat(format).ticks(10).orient('top');
  key = function(d) {
    return d.name;
  };
  my.init = function() {
    var bar, barsEnter, labels_group, main_group, svg, x_axis_group;
    svg = d3.select('.bars-svg');
    main_group = svg.select('.main-group');
    labels_group = svg.select('.labels-group');
    x_axis_group = svg.select('.x.axis');
    main_group.attr('transform', "translate(" + margin.left + ", " + margin.top + ")");
    labels_group.attr('transform', "translate(" + (margin.left - 10) + ", " + (margin.top + 22) + ")");
    x_axis_group.attr('transform', "translate(" + margin.left + ", " + margin.top + ")");
    bar = main_group.selectAll('rect').data(d3_array, key);
    barsEnter = bar.enter().append('rect').attr({
      width: 0,
      height: function() {
        return y.rangeBand();
      },
      y: function(d, i) {
        return y(d.name);
      },
      x: 0,
      "class": 'bar',
      rx: 4
    }).transition().duration(1500).attr('width', function(d) {
      return x(d.value);
    });
    labels_group.selectAll('text').data(d3_array, key).enter().append('text').attr('opacity', 0).text(function(d) {
      return d.name;
    }).style('text-anchor', 'end').attr('y', function(d, i) {
      return y(d.name);
    }).attr('class', 'rel-label').transition().duration(1500).attr('opacity', 1);
    return x_axis_group.transition().duration(1500).call(xAxis);
  };
  my.update = function() {
    var labels_group_labels, main_group_bars, svg, x_axis_group;
    svg = d3.select('.bars-svg');
    main_group_bars = svg.selectAll('.main-group .bar');
    labels_group_labels = svg.selectAll('.labels-group text');
    x_axis_group = svg.select('.x.axis');
    main_group_bars.data(d3_array, key).transition().duration(1000).attr('width', function(d) {
      return x(d.value);
    }).attr('y', function(d, i) {
      return y(d.name);
    });
    labels_group_labels.data(d3_array, key).transition().duration(1000).attr('y', function(d, i) {
      return y(d.name);
    });
    return x_axis_group.transition().duration(1000).call(xAxis);
  };
  my.width = function(value) {
    if (!arguments.length) {
      return width;
    }
    width = value;
    return my;
  };
  my.height = function(value) {
    if (!arguments.length) {
      return height;
    }
    height = value;
    return my;
  };
  return my;
};

module.exports = drawBarChart;
