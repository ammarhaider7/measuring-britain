// Generated by CoffeeScript 1.10.0
var parse;

parse = function(dataArray) {
  var ages, ethnicities, max_perc, max_value, nested_data, percentages;
  nested_data = d3.nest().key(function(d) {
    return d.c_ethpuk11.description;
  }).key(function(d) {
    return d.c_age.description;
  }).rollup(function(values) {
    return {
      sum: d3.sum(values, function(d) {
        return d.obs_value.value;
      }),
      good: d3.sum(values, function(d) {
        if (d.c_health.value === 1) {
          return d.obs_value.value;
        }
      }),
      fair: d3.sum(values, function(d) {
        if (d.c_health.value === 2) {
          return d.obs_value.value;
        }
      }),
      bad: d3.sum(values, function(d) {
        if (d.c_health.value === 3) {
          return d.obs_value.value;
        }
      })
    };
  }).entries(dataArray);
  percentages = nested_data.map(function(ethnicity) {
    return {
      key: ethnicity.key,
      values: ethnicity.values.map(function(age) {
        return {
          key: age.key,
          values: {
            good: age.values.good / age.values.sum,
            fair: age.values.fair / age.values.sum,
            bad: age.values.bad / age.values.sum
          }
        };
      })
    };
  });
  window.flatMaxPercsArray = percentages.map(function(ethnicity) {
    return {
      max_bad_perc: d3.max(ethnicity.values, function(d) {
        return d.values.bad;
      })
    };
  });
  max_perc = d3.max(flatMaxPercsArray, function(d) {
    return d.max_bad_perc;
  });
  max_value = d3.max(dataArray, function(d) {
    return d.obs_value.value;
  });
  ethnicities = nested_data.map(function(eth) {
    return eth.key;
  });
  ages = nested_data[0].values.map(function(age) {
    return age.key;
  });
  return {
    ethnicities: ethnicities,
    nested_data: nested_data,
    percentages: percentages,
    max_perc: max_perc,
    max_value: max_value,
    ages: ages
  };
};

module.exports = parse;

//# sourceMappingURL=general-health-parser.map
