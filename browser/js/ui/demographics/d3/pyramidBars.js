// Generated by CoffeeScript 1.10.0
var drawPyrBars;

drawPyrBars = function(options) {
  var activeBarsValue, age, bars_height, bars_width, category_value, container, dataArr, females, format, height, init, initial, isDefault, males, margin, my, ref, ref1, update, width, x, xAxis, y;
  container = options.container, age = options.age, females = options.females, males = options.males, initial = options.initial, isDefault = options.isDefault, activeBarsValue = options.activeBarsValue;
  width = (ref = $(container).width()) != null ? ref : 358;
  height = (ref1 = $(container).height()) != null ? ref1 : 275;
  dataArr = [
    {
      sex: 'female',
      value: females
    }, {
      sex: 'male',
      value: males
    }
  ];
  format = d3.format('.3s');
  margin = {
    top: 60,
    right: 0,
    bottom: 30,
    left: 0.375 * width
  };
  bars_height = height - margin.bottom - margin.top;
  bars_width = width - margin.left;
  x = d3.scale.ordinal().rangeRoundBands([0, bars_width], 0.4);
  y = d3.scale.linear().range([bars_height, 0]);
  xAxis = d3.svg.axis().scale(x).orient('bottom');
  x.domain(['male', 'female']);
  y.domain([
    0, d3.max(dataArr, function(d) {
      return d.value;
    })
  ]);
  category_value = activeBarsValue === 'default' ? 'England \& Wales' : activeBarsValue;
  my = function() {
    if (initial === true && isDefault === true) {
      return init();
    } else if (!((initial != null) && isDefault === false)) {
      return update();
    }
  };
  init = function() {
    var agesGroup, labelsGroup, main_group, svg, xAxisGroup;
    svg = d3.select('.pyramid-bars-svg');
    main_group = svg.select('.main-group');
    labelsGroup = svg.select('.labels-group');
    agesGroup = svg.select('.ages-group');
    xAxisGroup = svg.select('.x.axis');
    main_group.attr('transform', "translate(" + margin.left + ", " + margin.top + ")");
    labelsGroup.attr('transform', "translate(" + (margin.left + x.rangeBand() / 2) + ", " + (margin.top - 15) + ")");
    xAxisGroup.attr("transform", "translate(" + margin.left + ", " + (height - margin.bottom) + ")");
    agesGroup.attr("transform", "translate(20, " + (height / 2 - 30) + ")");
    main_group.selectAll('.bar').data(dataArr).enter().append('rect').attr({
      "class": function(d) {
        if (d.sex === 'female') {
          return 'bar female';
        } else {
          return 'bar male';
        }
      },
      x: function(d) {
        return x(d.sex);
      },
      y: y(0),
      height: bars_height - y(0),
      ry: 3,
      width: x.rangeBand()
    }).transition().duration(1500).attr({
      y: function(d) {
        return y(d.value);
      },
      height: function(d) {
        return bars_height - y(d.value);
      }
    });
    agesGroup.append('text').text(category_value).style('text-anchor', 'middle').style('font-weight', 'bold').attr('x', margin.left / 2).attr('class', 'category-value-label mb-pyr-label');
    agesGroup.append('text').text('Ages').style('text-anchor', 'middle').attr('x', margin.left / 2).attr('y', 30).attr('class', 'mb-pyr-label');
    agesGroup.append('text').text(age).style('text-anchor', 'middle').style('font-weight', 'bold').attr({
      x: margin.left / 2,
      y: 70,
      "class": 'age-band-label mb-pyr-label'
    });
    labelsGroup.append('text').text(format(males)).style('text-anchor', 'middle').attr('x', x('male')).attr('class', 'male-number');
    labelsGroup.append('text').text(format(females)).style('text-anchor', 'middle').attr('x', x('female')).attr('class', 'female-number');
    return xAxisGroup.call(xAxis);
  };
  update = function() {
    var ageBand, categoryValue, femaleVal, main_group, maleVal, svg;
    svg = d3.select('.pyramid-bars-svg');
    main_group = svg.select('.main-group');
    maleVal = svg.select('.male-number');
    femaleVal = svg.select('.female-number');
    ageBand = svg.select('.age-band-label');
    categoryValue = svg.select('.category-value-label');
    main_group.selectAll('.bar').data(dataArr).transition().duration(250).attr({
      y: function(d) {
        return y(d.value);
      },
      height: function(d) {
        return bars_height - y(d.value);
      }
    });
    maleVal.text(format(males));
    femaleVal.text(format(females));
    ageBand.text(age);
    return categoryValue.text(category_value);
  };
  my.width = function(value) {
    if (!arguments.length) {
      return width;
    }
    width = value;
    return my;
  };
  my.height = function(value) {
    if (!arguments.length) {
      return height;
    }
    height = value;
    return my;
  };
  return my;
};

module.exports = drawPyrBars;

//# sourceMappingURL=pyramidBars.map
